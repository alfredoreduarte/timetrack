// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  email             String      @unique
  name              String
  password          String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  defaultHourlyRate Float?
  passwordResetToken    String?
  passwordResetExpiresAt DateTime?

  // Relations
  projects     Project[]
  timeEntries  TimeEntry[]
  tasks        Task[]
  apiKeys      ApiKey[]

  @@map("users")
  @@index([email])
  @@index([passwordResetToken])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String    @default("#3B82F6")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hourlyRate  Float?

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timeEntries TimeEntry[]

  @@map("projects")
  @@index([userId])
  @@index([userId, isActive])
}

model Task {
  id          String    @id @default(cuid())
  name        String
  description String?
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hourlyRate  Float?

  // Relations
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]

  @@map("tasks")
  @@index([projectId])
  @@index([userId])
  @@index([userId, isCompleted])
}

model TimeEntry {
  id                  String    @id @default(cuid())
  description         String?
  startTime           DateTime
  endTime             DateTime?
  duration            Int?      // Duration in seconds
  isRunning           Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  hourlyRateSnapshot  Float?    // Snapshot of hourly rate at time of creation

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("time_entries")
  @@index([userId])
  @@index([userId, isRunning])
  @@index([userId, startTime])
  @@index([projectId])
  @@index([taskId])
}

model ApiKey {
  id        String    @id @default(cuid())
  name      String
  key       String    @unique
  isActive  Boolean   @default(true)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
  @@index([userId])
  @@index([key])
  @@index([userId, isActive])
}