root@docker-1:/etc/nginx# cat sites-available/timetrack
# /etc/nginx/sites-available/timetrack
# Replace yourdomain.com with your actual domain

# IMPORTANT: Add these rate limiting zones to your main nginx.conf in the http{} block
# OR create a separate file /etc/nginx/conf.d/rate-limits.conf with:
# limit_req_zone $binary_remote_addr zone=timetrack_api:10m rate=10r/s;
# limit_req_zone $binary_remote_addr zone=timetrack_web:10m rate=30r/s;

server {
    server_name track.alfredo.re;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # API endpoints - proxy to API service
    location /api/ {
        # Uncomment if you've added rate limiting zones to nginx.conf
        # limit_req zone=timetrack_api burst=10 nodelay;

        proxy_pass http://localhost:3011;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check endpoint - proxy to API service
    location /health {
        proxy_pass http://localhost:3011/health;
        access_log off;
    }

    # API docs - proxy to API service
    location /api-docs {
        proxy_pass http://localhost:3011/api-docs;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Frontend static files and React app - proxy to Web service
    location / {
        # Uncomment if you've added rate limiting zones to nginx.conf
        # limit_req zone=timetrack_web burst=20 nodelay;

        proxy_pass http://localhost:3010;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/track.alfredo.re/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/track.alfredo.re/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

# Optional: Separate subdomain for API
server {
    server_name api.track.alfredo.re;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    location / {
        # Uncomment if you've added rate limiting zones to nginx.conf
        # limit_req zone=timetrack_api burst=10 nodelay;

        proxy_pass http://localhost:3011;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/track.alfredo.re/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/track.alfredo.re/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
    if ($host = track.alfredo.re) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name track.alfredo.re;
    return 404; # managed by Certbot


}
server {
    if ($host = api.track.alfredo.re) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name api.track.alfredo.re;
    return 404; # managed by Certbot


}root@docker-1:/etc/nginx#
