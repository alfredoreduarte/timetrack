# /etc/nginx/sites-available/timetrack
# Replace yourdomain.com with your actual domain

# IMPORTANT: Add these rate limiting zones to your main nginx.conf in the http{} block
# OR create a separate file /etc/nginx/conf.d/rate-limits.conf with:
# limit_req_zone $binary_remote_addr zone=timetrack_api:10m rate=10r/s;
# limit_req_zone $binary_remote_addr zone=timetrack_web:10m rate=30r/s;

###############################################################################
# 1) Marketing landing  (yourdomain.com  -> container port 3014)
###############################################################################
server {
    server_name yourdomain.com;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Health check endpoint - proxy to API service
    location /health {
        limit_req zone=timetrack_api burst=10 nodelay;
        proxy_pass http://localhost:3011/health;
        access_log off;
    }

    # API docs - proxy to API service
    location /api-docs {
        limit_req zone=timetrack_web burst=30 nodelay;
        proxy_pass http://localhost:3011/api-docs;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Static marketing site
    location / {
        limit_req zone=timetrack_web burst=30 nodelay;
        proxy_pass http://localhost:3014;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_connect_timeout 60s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;
    }

    listen 443 ssl;                                  # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;      # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;    # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf;                           # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;                             # managed by Certbot
}

###############################################################################
# 2) Dashboard app  (app.yourdomain.com  -> container port 3010)
###############################################################################
server {
    server_name app.yourdomain.com;

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # React app served by dashboard container (nginx)
    location / {
        # Uncomment if you've added rate limiting zones to nginx.conf
        limit_req zone=timetrack_web burst=20 nodelay;

        proxy_pass http://localhost:3010;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/app.yourdomain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/app.yourdomain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}

###############################################################################
# 3) Dedicated API sub-domain  (unchanged)
###############################################################################
server {
    server_name api.yourdomain.com;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    location / {
        # Uncomment if you've added rate limiting zones to nginx.conf
        limit_req zone=timetrack_api burst=10 nodelay;

        proxy_pass http://localhost:3011;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

###############################################################################
# HTTP-to-HTTPS redirects
###############################################################################
server {
    if ($host = yourdomain.com)     { return 301 https://$host$request_uri; } # managed by Certbot
    listen 80;
    server_name yourdomain.com;
    return 404;                                                             # managed by Certbot
}

server {
    if ($host = app.yourdomain.com) { return 301 https://$host$request_uri; } # managed by Certbot
    listen 80;
    server_name app.yourdomain.com;
    return 404;                                                             # managed by Certbot
}

server {
    if ($host = api.yourdomain.com) { return 301 https://$host$request_uri; } # managed by Certbot
    listen 80;
    server_name api.yourdomain.com;
    return 404;                                                             # managed by Certbot
}
